import { BigNumber, ethers } from 'ethers';
import { metadata } from '../constants';
import { Asset } from './types';

const osContract = '0x495f947276749ce646f68ac8c248420045cb7b5e';

const abi = [
  'function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory)',
];

export const unmintedMoos = [
  '81086769033880357206596084476994515861067324006954129146728570476895743770625',
  '81086769033880357206596084476994515861067324006954129146728570495587441442817',
  '81086769033880357206596084476994515861067324006954129146728570508781580976129',
  '81086769033880357206596084476994515861067324006954129146728570512080115859457',
  '81086769033880357206596084476994515861067324006954129146728570582448860037121',
  '81086769033880357206596084476994515861067324006954129146728570583548371664897',
  '81086769033880357206596084476994515861067324006954129146728570597842022825985',
  '81086769033880357206596084476994515861067324006954129146728570598941534453761',
  '81086769033880357206596084476994515861067324006954129146728570600041046081537',
  '81086769033880357206596084476994515861067324006954129146728570601140557709313',
  '81086769033880357206596084476994515861067324006954129146728570602240069337089',
  '81086769033880357206596084476994515861067324006954129146728570603339580964865',
  '81086769033880357206596084476994515861067324006954129146728570604439092592641',
  '81086769033880357206596084476994515861067324006954129146728570605538604220417',
  '81086769033880357206596084476994515861067324006954129146728570606638115848193',
  '81086769033880357206596084476994515861067324006954129146728570607737627475969',
  '81086769033880357206596084476994515861067324006954129146728570609936650731521',
];

const getAssetsFromAddress = async (
  provider?: ethers.providers.Provider,
  address?: string
): Promise<Asset[]> => {
  if (!provider || !address) {
    return [];
  }

  if (address === '0xB3457c2065Fd1F384e9f05495251F2894D1659b6') {
    return metadata.filter(({ token }) => unmintedMoos.includes(token));
  }

  const contract = new ethers.Contract(osContract, abi, provider);
  const addresses = metadata.map(() => address);
  const tokens = metadata.map((asset) => asset.token);

  const response: BigNumber[] = await contract.callStatic.balanceOfBatch(addresses, tokens);
  const assets: Asset[] = [];
  response.forEach((bigNumber, idx) => !bigNumber.isZero() && assets.push(metadata[idx]));

  return assets;
};

export default getAssetsFromAddress;
